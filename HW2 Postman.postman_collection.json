{
	"info": {
		"_postman_id": "10f15138-ac2f-4b86-859a-2320a1e05ce0",
		"name": "HW2 Postman",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "15657291"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Отправить запрос.",
							"//2. Статус код 200.",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200)",
							"})",
							"",
							"//3. Проверить, что в body приходит правильный string.",
							"",
							"pm.test(\"Body is correct\", function () {",
							"    pm.response.to.have.body(\"This is the first responce from server!ss\")",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.",
							"// 2. Статус код 200.",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200)",
							"})",
							"",
							"//3. Спарсить response body в json.",
							"",
							"let bodyRequest = request.data",
							"let bodyResponse= pm.response.json()",
							"",
							"//4. Проверить, что name в ответе равно name s request (name вбить руками.)",
							"",
							"pm.test(\"Name in response = name in request\", function () {",
							"    pm.expect(bodyResponse.name).to.eql(\"Vika\")",
							"});",
							"console.log(bodyResponse.name)",
							"",
							"//5. Проверить, что age в ответе равно age s request (age вбить руками.)",
							"",
							"pm.test(\"Age in response = Age in request\", function () {",
							"    pm.expect(bodyResponse.age).to.eql(\"30\")",
							"});",
							"console.log(bodyResponse.age)",
							"",
							"//6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)",
							"",
							"pm.test(\"Salary in response = Salary in request\", function () {",
							"    pm.expect(bodyResponse.salary).to.eql(2000)",
							"});",
							"console.log(bodyResponse.salary)",
							"",
							"//7. Спарсить request.",
							"",
							"console.log (bodyResponse)",
							"",
							"//8. Проверить, что name в ответе равно name s request (name забрать из request.)",
							"",
							"pm.test(\"name from request\", function() {",
							"    pm.expect(bodyResponse.name).to.equal(bodyRequest.name)",
							"})",
							"console.log(bodyResponse.name)",
							"",
							"",
							"//9. Проверить, что age в ответе равно age s request (age забрать из request.)",
							"",
							"pm.test(\"age from request\", function() {",
							"    pm.expect(bodyResponse.age).to.equal(bodyRequest.age)",
							"});",
							"console.log(bodyResponse.age)",
							"",
							"//10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)",
							"",
							"pm.test(\"salary from request\", function() {",
							"    pm.expect(bodyResponse.salary).to.equal(+bodyRequest.salary)",
							"})",
							"console.log(bodyResponse.salary)",
							"",
							"//11. Вывести в консоль параметр family из response.",
							"",
							"console.log(bodyResponse.family)",
							"",
							"//12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)",
							"",
							"pm.test('salary from request',function() {",
							"     pm.expect(bodyResponse.family.u_salary_1_5_year).to.eql(bodyRequest.salary*4)",
							" })",
							"",
							"console.log(bodyResponse.family.u_salary_1_5_year)",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Vika",
							"type": "text"
						},
						{
							"key": "age",
							"value": "30",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "2000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_3",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.",
							"// 2. Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200)",
							"})",
							"",
							"//3. Спарсить response body в json.",
							"",
							"let respBody = pm.response.json()",
							"console.log(respBody)",
							"",
							"//4. Спарсить request.",
							"",
							"let req = pm.request.url.query.toObject()",
							"console.log(req)",
							"",
							"//5. Проверить, что name в ответе равно name s request (name забрать из request.)",
							"pm.test(\"name from request\", function() {",
							"    pm.expect(respBody.name).to.equal(req.name)",
							"})",
							"console.log(respBody.name)",
							"",
							"//6. Проверить, что age в ответе равно age s request (age забрать из request.)",
							"pm.test(\"age from request\", function() {",
							"    pm.expect(respBody.age).to.equal(req.age)",
							"})",
							"console.log(respBody.age)",
							"",
							"//7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)",
							"",
							"pm.test(\"salary from request\", function() {",
							"    pm.expect(respBody.salary).to.equal(+req.salary)",
							"})",
							"console.log(respBody.salary)",
							"",
							"//8. Вывести в консоль параметр family из response.",
							"",
							"console.log(respBody.family)",
							"",
							"",
							"//9. Проверить, что у параметра dog есть параметры name.",
							"",
							"pm.test(\"Dog has a name\", function () {",
							"    pm.expect(respBody.family.pets.dog).to.have.property(\"name\")",
							"})",
							"console.log (respBody.family.pets.dog)",
							"",
							"",
							"//10. Проверить, что у параметра dog есть параметры age.",
							"",
							"pm.test(\"Dog has an age\", function () {",
							"    pm.expect(respBody.family.pets.dog).to.have.property(\"age\")",
							"})",
							"console.log (respBody.family.pets.dog)",
							"",
							"//11. Проверить, что параметр name имеет значение Luky.",
							"",
							"pm.test(\"Name is Lucky\", function () {",
							"    pm.expect(respBody.family.pets.dog.name).to.be.oneOf([\"Luky\"])",
							"})",
							"console.log (respBody.family.pets.dog.name)",
							"",
							"",
							"//12. Проверить, что параметр age имеет значение 4.",
							"",
							"pm.test(\"Age is 4\", function () {",
							"    pm.expect(respBody.family.pets.dog.age).to.be.oneOf([4])",
							"})",
							"console.log (respBody.family.pets.dog.age)",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Vika&age=30&salary=2000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Vika"
						},
						{
							"key": "age",
							"value": "30"
						},
						{
							"key": "salary",
							"value": "2000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.",
							"// 2. Статус код 200.",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200)",
							"})",
							"",
							"// 3. Спарсить response body в json.",
							"",
							"let respBody = pm.response.json()",
							"console.log(respBody)",
							"",
							"// 4. Спарсить request.",
							"",
							"let req = pm.request.url.query.toObject()",
							"console.log(req)",
							"",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)",
							"",
							"pm.test(\"Name from request\", function () {",
							"    pm.expect(respBody.name).to.eql(req.name)",
							"});",
							"console.log(respBody.name)",
							"",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request.)",
							"",
							"pm.test(\"Age from request\", function () {",
							"    pm.expect(respBody.age).to.eql(+req.age)",
							"})",
							"console.log(respBody.age)",
							"",
							"",
							"// 7. Вывести в консоль параметр salary из request.",
							"",
							"console.log(req.salary)",
							"",
							"// 8. Вывести в консоль параметр salary из response.",
							"",
							"console.log(respBody.salary)",
							"",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.",
							"",
							"console.log (respBody.salary[0])",
							"",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.",
							"",
							"console.log (respBody.salary[1])",
							"",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.",
							"",
							"console.log (respBody.salary[2])",
							"",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)",
							"",
							"pm.test(\"salary_element_0 = req_salary\", function () {",
							"    pm.expect(+respBody.salary[0]).to.eql(+req.salary);",
							"});",
							"console.log (respBody.salary[0])",
							"",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)",
							"",
							"pm.test(\"salary_element_1 = req_salary*2\", function () {",
							"    pm.expect(+respBody.salary[1]).to.eql(+req.salary*2);",
							"});",
							"console.log (respBody.salary[1])",
							"",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)",
							"",
							"pm.test(\"salary_element_2 = req_salary*3\", function () {",
							"    pm.expect(+respBody.salary[2]).to.eql(+req.salary*3);",
							"});",
							"console.log (respBody.salary[2])",
							"",
							"// 15. Создать в окружении переменную name",
							"// 16. Создать в окружении переменную age",
							"// 17. Создать в окружении переменную salary",
							"// 18. Передать в окружение переменную name",
							"// 19. Передать в окружение переменную age",
							"// 20. Передать в окружение переменную salary",
							"",
							"pm.environment.set(\"name\", \"Vika\")",
							"",
							"pm.environment.set(\"age\", 30)",
							"",
							"pm.environment.set(\"salary\", 2000)",
							"",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.",
							"",
							"for (i = 0; i < respBody.salary.length; i++){",
							"    console.log (\"salary = \", respBody.salary[i])",
							"}",
							"",
							"",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Vika&age=30&salary=2000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Vika"
						},
						{
							"key": "age",
							"value": "30"
						},
						{
							"key": "salary",
							"value": "2000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Вставить параметр salary из окружения в request",
							"",
							"let salary = pm.environment.get('salary')",
							"",
							"//2. Вставить параметр age из окружения в age",
							"",
							"let age = pm.environment.get('age')",
							"",
							"//3. Вставить параметр name из окружения в name",
							"",
							"let name = pm.environment.get('name')",
							"",
							"",
							"//4. Отправить запрос.",
							"//5. Статус код 200",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"})",
							"",
							"",
							"//6. Спарсить response body в json.",
							"",
							"let respBody = pm.response.json()",
							"console.log(respBody)",
							"",
							"",
							"//7. Спарсить request.",
							"",
							"let jsonReq = request.data",
							"console.log(jsonReq)",
							"",
							"",
							"//8. Проверить, что json response имеет параметр start_qa_salary",
							"",
							"pm.test(\"json response has parameter start_qa_salary\", function () {",
							"    pm.expect(respBody).to.have.property(\"start_qa_salary\")",
							"})",
							"console.log(respBody.start_qa_salary)",
							"",
							"//9. Проверить, что json response имеет параметр qa_salary_after_6_months",
							"",
							"pm.test(\"json response has parameter qa_salary_after_6_months\", function () {",
							"    pm.expect(respBody).to.have.property(\"qa_salary_after_6_months\")",
							"})",
							"",
							"console.log(respBody.qa_salary_after_6_months)",
							"",
							"//10. Проверить, что json response имеет параметр qa_salary_after_12_months",
							"",
							"pm.test(\"json response has parameter qa_salary_after_12_months\", function () {",
							"    pm.expect(respBody).to.have.property(\"qa_salary_after_12_months\");",
							"})",
							"",
							"console.log(respBody.qa_salary_after_12_months)",
							"",
							"//11. Проверить, что json response имеет параметр qa_salary_after_1.5_year",
							"",
							"pm.test(\"json response has parameter qa_salary_after_1.5_year\", function () {",
							"    pm.expect(respBody).to.have.property(\"qa_salary_after_1.5_year\")",
							"})",
							"",
							"console.log(respBody['qa_salary_after_1.5_year'])",
							"",
							"//12. Проверить, что json response имеет параметр qa_salary_after_3.5_years",
							"",
							"pm.test(\"json response has parameter qa_salary_after_3.5_years\", function () {",
							"    pm.expect(respBody).to.have.property(\"qa_salary_after_3.5_years\");",
							"})",
							"console.log(respBody['qa_salary_after_3.5_year'])",
							"",
							"",
							"//13. Проверить, что json response имеет параметр person",
							"",
							"pm.test(\"json response has parameter person\", function () {",
							"    pm.expect(respBody).to.have.property(\"person\");",
							"})",
							"",
							"console.log(respBody.person)",
							"",
							"//14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)",
							"",
							"pm.test(\"start_qa_salary = salary_from_request\", function () {",
							"     pm.expect(respBody.start_qa_salary).to.eql(+jsonReq.salary)",
							"})",
							"",
							"console.log(respBody.start_qa_salary)",
							"",
							"//15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)",
							"",
							"pm.test(\"qa_salary_after_6_months = salary*2_from_request\", function () {",
							"     pm.expect(respBody.qa_salary_after_6_months).to.eql(+jsonReq.salary*2)",
							"})",
							"",
							"console.log(respBody.qa_salary_after_6_months)",
							"",
							"//16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)",
							"",
							"pm.test(\"qa_salary_after_12_months = salary*2.7_from_request\", function () {",
							"     pm.expect(respBody.qa_salary_after_12_months).to.eql(+jsonReq.salary*2.7)",
							"})",
							"",
							"console.log(respBody.qa_salary_after_12_months)",
							"",
							"//17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)",
							"",
							"pm.test(\"qa_salary_after_1.5_year = salary*3.3_from_request\", function () {",
							"     pm.expect(respBody ['qa_salary_after_1.5_year']).to.eql(+jsonReq.salary*3.3)",
							"})",
							"",
							"console.log(respBody ['qa_salary_after_1.5_year'])",
							"",
							"",
							"//18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)",
							"",
							"pm.test(\"qa_salary_after_3.5_years = salary*3.8_from_request\", function () {",
							"     pm.expect(respBody ['qa_salary_after_3.5_years']).to.eql(+jsonReq.salary*3.8)",
							"})",
							"",
							"console.log(respBody ['qa_salary_after_3.5_years'])",
							"",
							"//19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)",
							"",
							"pm.test('в параметре person, 1-й элемент из u_name равен salary из request',function () {",
							"     pm.expect(respBody.person.u_name[1]).to.eql(+jsonReq.salary)",
							"})",
							"",
							"console.log(respBody.person.u_name[1])",
							"",
							"//20. Проверить, что что параметр u_age равен age из request (age забрать из request.)",
							"",
							"pm.test('параметр u_age равен age из request',function () {",
							"     pm.expect(respBody.person.u_age).to.eql(+jsonReq.age)",
							"})",
							"",
							"console.log(respBody.person.u_age)",
							"",
							"//21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)",
							"",
							"pm.test('параметр u_salary_5_years равен salary*4.2 из request',function () {",
							"     pm.expect(respBody.person.u_salary_5_years).to.eql(+jsonReq.salary*4.2)",
							"})",
							"",
							"console.log(respBody.person.u_salary_5_years)",
							"",
							"",
							"//22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.",
							"",
							"for (let i in respBody.person){",
							"    console.log(\"Property:\", i, \"property value:\", respBody.person[i])",
							"}",
							" ",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Vika",
							"type": "text"
						},
						{
							"key": "age",
							"value": "30",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "2000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_2",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}